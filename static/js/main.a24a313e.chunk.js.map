{"version":3,"sources":["components/Alert.js","components/About.js","components/Navbar.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","style","height","alert","className","type","role","msg","About","mystyle","color","mode","backgroundColor","border","id","Navbar","to","title","onClick","toggleMode","htmlFor","Textform","useState","text","setxText","heading","value","onChange","event","target","rows","disabled","length","newtext","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","newText","split","join","filter","element","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a24a313e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n function Alert(props) {\r\n   \r\n    return (\r\n        <div style={{height:'50px'}}>\r\n            {props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{props.alert.type}</strong>:{props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>}\r\n         </div>\r\n    )\r\n}\r\nexport default Alert\r\n\r\n\r\n","//import React, { useState } from 'react'\r\n\r\nexport default function About(props) {\r\n  // const [mystyle, setMyStyle] = useState({\r\n    //    color:'black',\r\n    //    backgroundColor:\"white\"\r\n   // })\r\n   let mystyle={\r\n       color:props.mode==='dark'?'white':'#042743',\r\n       backgroundColor:props.mode==='dark'?'#042743':'white',\r\n       border:'1px solid' ,\r\n       //borderColor:'dark'?'white':'#042743',\r\n   }\r\n    \r\n    return (\r\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n            <h2 className=\"my-2\">About Us</h2>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\"  style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                           <strong>Analyze your text</strong> \r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\"  style={mystyle}>\r\n                            TextUtils gives you a way to analyze your text quickly and efficiently.Be it word count character count or\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\"  style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                        <strong>Free to Use</strong> \r\n\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\"  style={mystyle}>\r\n                            TextUtils is a free character counter tool that provides instant character count & word count statistics for a given text.TextUtils reports the number of character and words.\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\"  style={mystyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                           <strong> Browser Compatible</strong> \r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\"  style={mystyle}>\r\n                            This word counter softwareworks in any web browser.It suits to count charcter in facebook,pdf document,excel document,blogs,book etc..\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n           </div> \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"navbar-brand\" to=\"#\">{props.title}</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                          </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.About}</Link>\r\n                        </li>\r\n                    </ul>\r\n                   {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n    </form> */}\r\n                <div className={`form-check form-switch text-${props.mode=== 'light'?'dark':'light'}`}>\r\n                <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    About:PropTypes.string\r\n}\r\n","import React,{useState} from 'react'\r\n\r\n\r\nexport default function Textform(props) {\r\n    const [text, setxText] = useState(\"\");\r\n    const handleUpClick = () =>{\r\n        let newtext=text.toUpperCase();\r\n        setxText(newtext);\r\n        props.showAlert(\"Converted to UpperCase!\",\"success\")\r\n    } \r\n    const handleLowClick = () =>{\r\n        let newtext=text.toLowerCase();\r\n        setxText(newtext);\r\n        props.showAlert(\"Converted to LowerCase!\",\"success\")\r\n    } \r\n    const handleOnChange = (event) =>{\r\n        //console.log(\"OnChange\");\r\n        setxText(event.target.value);\r\n    }\r\n    const handleClearClick = () =>{\r\n        let newtext='';\r\n        setxText(newtext);\r\n        props.showAlert(\"Text Cleared!\",\"success\")\r\n    } \r\n    const handleCopyClick = () => {\r\n        //var text = document.getElementById(\"myBox\")\r\n        //text.select();\r\n        //document.getSelection().removeAllRanges();\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert(\"Copied to Clipboard!\",\"success\")\r\n    }\r\n    const handleExtraSpaces = () => {\r\n        let newText=text.split(/[ ]+/);\r\n        setxText(newText.join(\" \"));\r\n        props.showAlert(\"Extra spaces removed!\",\"success\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"conatiner\" style={{color:props.mode=== 'dark' ? 'white':'#042743'}} >\r\n        <h3>{props.heading}</h3>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"myBox\" value={text}  onChange={handleOnChange} style={{backgroundColor:props.mode=== 'dark'?'#13466e':'white',color:props.mode=== 'dark' ? 'white':'#042743'}} rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2 my-2\" disabled={text.length===0} onClick={handleUpClick}>\r\n                Convert to UpperCase\r\n            </button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" disabled={text.length===0} onClick={handleLowClick}>\r\n                Convert to LowerCase\r\n            </button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" disabled={text.length===0} onClick={handleClearClick}>\r\n                Clear text\r\n            </button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" disabled={text.length===0} onClick={handleCopyClick}>\r\n                Copy text\r\n            </button>\r\n            <button className=\"btn btn-primary mx-2 my-2\" disabled={text.length===0} onClick={handleExtraSpaces}>\r\n                Remove Extra Spaces\r\n            </button>\r\n        </div>\r\n        <div className=\"container my-2\"  style={{color:props.mode=== 'dark' ? 'white':'#042743'}}>\r\n            <h3>Your text summary</h3>\r\n            <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {text.length} characters</p>\r\n            <p>{0.08*text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes read</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length > 0?text:\"Nothing to Preview\"}</p>\r\n\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","\nimport { useState } from 'react';\nimport './App.css';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\n\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\n\n\nfunction App() {\n const [mode,setMode] = useState('light')\n const [alert, setAlert] = useState(null)\n const showAlert = (message,type) =>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n }\n const toggleMode = () =>{\n if(mode ==='light'){\n   setMode('dark');\n   document.body.style.backgroundColor=\"#042743\";\n   showAlert(\"Dark mode has enabled\",\"success\")\n   //document.title='TextUtils-Dark mode'\n }\n else{\n   setMode('light');\n   document.body.style.backgroundColor=\"white\";\n   showAlert(\"Light mode has enabled\",\"success\")\n   //document.title='TextUtils-Light mode'\n  \n }\n }\n \n  return (\n    \n    <>\n      {/* <Navbar title=\"TextUtils\" About=\"Abouttextutils\" /> */}\n      <Router> \n      \n      <Navbar title=\"TextUtils\" mode={mode} About=\"Abouttextutils\" toggleMode={toggleMode} />\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n   \n      <Routes>\n          <Route exact path=\"/about\" element={<About mode={mode}/>} />\n            \n          < Route  exact path=\"/\" \n            element={<Textform  heading=\"Try TextUtils-Word Counter,Character Counter,Text Converter\" mode={mode} showAlert={showAlert} />}/>\n          \n          \n      </Routes>\n     \n      \n      </div>\n      </Router>\n       \n\n    </>\n\n   );\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}